
-----------------------------
n := NNetwork new.n configure: 2 hidden: 3 nbOfOutputs: 1.20000 timesRepeat: [ 	n train: #(0 0) desiredOutputs: #(0).		n train: #(0 1) desiredOutputs: #(1).	n train: #(1 0) desiredOutputs: #(1).	n train: #(1 1) desiredOutputs: #(0).].

-----------------------------
n := NNetwork new.n configure: 2 hidden: 3 nbOfOutputs: 2.data := {#(0 0 0) .	#(0 1 1) .	#(1 0 1) .	#(1 1 0) }.n train: data nbEpochs: 20000

-----------------------------
n := NNetwork new.n configure: 3 hidden: 8 nbOfOutputs: 8.data := {#(0 0 0 0).	#(0 0 1 1).	#(0 1 0 2).	#(0 1 1 3).	#(1 0 0 4).	#(1 0 1 5).	#(1 1 0 6).	#(1 1 1 7) }.n train: data nbEpochs: 1000.

-----------------------------
n := NNetwork new.n configure: 3 hidden: 8 nbOfOutputs: 8.data := {#(0 0 0 0).	#(0 0 1 1).	#(0 1 0 2).	#(0 1 1 3).	#(1 0 0 4).	#(1 0 1 5).	#(1 1 0 6).	#(1 1 1 7) }.n train: data nbEpochs: 1000....n predict: #(0 1 1)

-----------------------------
data := {#(0 0 0 0).	#(0 0 1 1).	#(0 1 0 2).	#(0 1 1 3).	#(1 0 0 4).	#(1 0 1 5).	#(1 1 0 6).	#(1 1 1 7) }.	d := Dictionary new.data do: [ :anExample |	d at: anExample allButLast put: anExample last ].d at: #(0 1 1)

-----------------------------
n := NNetwork new.n configure: 3 hidden: 8 nbOfOutputs: 8.data := {#(0 0 0 0).	#(0 0 1 1).	#(0 1 0 2).	#(0 1 1 3).	#(1 0 0 4).	#(1 0 1 5).	#(1 1 0 6).	#(1 1 1 7) }.n train: data nbEpochs: 1000.n predict: #(0.4 0.7 0.6)

-----------------------------
n := NNetwork new.n configure: 2 hidden: 3 nbOfOutputs: 2.data := {#(0 0 0) .    #(0 1 1) .    #(1 0 1) .    #(1 1 0) }.n train: data nbEpochs: 10000.

-----------------------------
n := NNetwork new.n configure: 2 hidden: 3 nbOfOutputs: 2.data := {#(0 0 0) .	#(0 0 1) }.n train: data nbEpochs: 1000.

-----------------------------
n := NNetwork new.n configure: 2 hidden: 3 nbOfOutputs: 2.data := {#(0 0 0) .	#(0 1 1) .	#(1 0 1) .	#(1 1 0) }.n train: data nbEpochs: 10000

-----------------------------
(ZnEasy get: 'https://agileartificialintelligence.github.io/Datasets/iris.csv') contents.

-----------------------------
"The execution of this script initializes the variable irisData.This variable is used in the subsequent scripts of this chapter"irisCSV := (ZnEasy get: 'https://agileartificialintelligence.github.io/Datasets/iris.csv') contents.lines := irisCSV lines. lines := lines allButFirst.tLines := lines collect: [ :l | 		| ss |		ss := l substrings: ','.		(ss allButLast collect: [ :w | w asNumber ]), (Array with: ss last) ].irisData := tLines collect: [ :row | 		| l |		row last = 'setosa' ifTrue: [ l := #( 0 ) ].		row last = 'versicolor' ifTrue: [ l := #( 1 ) ].		row last = 'virginica' ifTrue: [ l := #( 2 ) ].		row allButLast, l ].	irisData.

-----------------------------
n := NNetwork new.n configure: 4 hidden: 6 nbOfOutputs: 3.n train: irisData nbEpochs: 1000.

-----------------------------
"** UPDATED FOR Roassal3 **"
chart := RSCompositeChart new.rsPalette := RSSequentialColorPalette new oranges9.legend := RSLegend new.legend title: 'Learning rate effect'.#( 0.001 0.01 0.1 0.2 0.3 ) 	doWithIndex: [ :lr :index |		learningCurveOfNeuron := OrderedCollection new.		0 to: 1000 do: [ :nbOfTrained |			| r p res |			r := Random new seed: 42.			p := Neuron new.			p weights: #( -1 -1 ).			p bias: 2.			p learningRate: lr .			nbOfTrained timesRepeat: [				p train: #( 0 0 ) desiredOutput: 0.				p train: #( 0 1 ) desiredOutput: 0.				p train: #( 1 0 ) desiredOutput: 0.				p train: #( 1 1 ) desiredOutput: 1 ].			res := ((p feed: #( 0 0 )) - 0) abs			          + ((p feed: #( 0 1 )) - 0) abs			          + ((p feed: #( 1 0 )) - 0) abs			          + ((p feed: #( 1 1 )) - 1) abs.			learningCurveOfNeuron add: res / 4 ].		xValues := 0 to: 1000.		learnPlot := RSLinePlot new.		learnPlot x: (0 to: 1000) y: learningCurveOfNeuron.		learnPlot color: (rsPalette range at: 9 - index).		legend			text: 'Sigmoid neuron learnRate = ' , lr  asString			withCircleColor: (rsPalette range at: 9 - index).		chart add: learnPlot ].chart build.legend legendDo: [ :l |		l			withBorder;			padding: 5 ].legend layout vertical gapSize: 10.legend container: chart canvas.legend build.chart canvas "need canvas for legend to show up"

-----------------------------
n := NNetwork new.n configure: 4 hidden: 6 nbOfOutputs: 3.n learningRate: 0.3. " Repeat the script with a different value"n train: irisData nbEpochs: 1000.

-----------------------------
cut := 0.8.cutTraining := (irisData size * cut) rounded.cutTest := (irisData size * (1 - cut)) rounded.trainingData := irisData first: cutTraining.testData := irisData last: cutTest.

-----------------------------
cut := 0.8.cutTraining := (irisData size * cut) rounded.cutTest := (irisData size * (1 - cut)) rounded.trainingData := irisData first: cutTraining.testData := irisData last: cutTest....n := NNetwork new.n configure: 4 hidden: 6 nbOfOutputs: 3.n train: trainingData nbEpochs: 1000.

-----------------------------
cut := 0.8.cutTraining := (irisData size * cut) rounded.cutTest := (irisData size * (1 - cut)) rounded.trainingData := irisData first: cutTraining.testData := irisData last: cutTest.n := NNetwork new.n configure: 4 hidden: 6 nbOfOutputs: 3.n train: trainingData nbEpochs: 1000.(((testData collect: [ :d |	(n predict: d allButLast) = d last]) select: [ :d | d = true]) size / testData size) asFloat round: 2 

-----------------------------
cut := 0.7.cutTraining := (irisData size * cut) rounded.cutTest := (irisData size * (1 - cut)) rounded.trainingData := irisData first: cutTraining.testData := irisData last: cutTest.n := NNetwork new.n configure: 4 hidden: 6 nbOfOutputs: 3.n train: trainingData nbEpochs: 1000.(((testData collect: [ :d |	(n predict: d allButLast) = d last]) select: [ :d | d = true]) size / testData size) asFloat round: 2 

-----------------------------
shuffledIrisData := irisData shuffleBy: (Random seed: 42).cut := 0.8.cutTraining := (shuffledIrisData size * cut) rounded.cutTest := (shuffledIrisData size * (1 - cut)) rounded.trainingData := shuffledIrisData first: cutTraining.testData := shuffledIrisData last: cutTest.n := NNetwork new.n configure: 4 hidden: 6 nbOfOutputs: 3.n train: trainingData nbEpochs: 1000.(((testData collect: [ :d |	(n predict: d allButLast) = d last]) select: [ :d | d = true]) size / testData size) asFloat round: 2 

-----------------------------
max := OrderedCollection new.min := OrderedCollection new.(1 to: 4) collect: [ :i |	max add: (irisData collect: [ :d | d at: i ]) max.	min add: (irisData collect: [ :d | d at: i ]) min.].{ max . min }

-----------------------------
n := NNetwork new.n configure: 3 hidden: 8 nbOfOutputs: 8.data := {#(0 0 0 0).    #(0 0 1 1).    #(0 1 0 2).    #(0 1 1 3).    #(1 0 0 4).    #(1 0 1 5).    #(1 1 0 6).    #(1 1 1 7) }.n train: data nbEpochs: 1000.

-----------------------------
n := NNetwork new.n configure: 3 hidden: 8 nbOfOutputs: 8.data := {#(0 0 0 0).    #(0 0 1 1).    #(0 1000 0 2).    #(0 1000 1 3).    #(0.1 0 0 4).    #(0.1 0 1 5).    #(0.1 1000 0 6).    #(0.1 1000 1 7) }.n train: data nbEpochs: 10000.

-----------------------------
n := NNetwork new.n configure: 3 hidden: 8 nbOfOutputs: 8.data := {#(0 0 0 0).    #(0 0 1 1).    #(0 1000 0 2).    #(0 1000 1 3).    #(0.1 0 0 4).    #(0.1 0 1 5).    #(0.1 1000 0 6).    #(0.1 1000 1 7) }.n train: data nbEpochs: 10000.
