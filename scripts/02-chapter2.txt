
-----------------------------
#(1 2 3) with: #(10 20 30) collect: [ :a :b | a + b ]

-----------------------------
p := Neuron new.p weights: #(1 2).p bias: -2.p feed: #(5 2)

-----------------------------
p := Neuron new.p weights: #(-1 -1).p bias: 2.p feed: #(0 1).

-----------------------------
p := Neuron new.p weights: #(-1 -1).p bias: 2.p train: #(0 1) desiredOutput: 0.p feed: #(0 1).

-----------------------------
p := Neuron new.p weights: #(-1 -1).p bias: 2.10 timesRepeat: [ p train: #(0 1) desiredOutput: 0 ].p feed: #(0 1).

-----------------------------
"** UPDATED FOR Roassal3 **"

chart := RSCompositeChart new.plot := RSLinePlot new.plot color: Color blue.plot x: (1 to: 100) y: ((1 to: 100) collect: [ :x | (x / 3.14) sin  ]).chart add: plot.chart build.chart

-----------------------------
"** UPDATED FOR Roassal3 **"somePoints := OrderedCollection new.500 timesRepeat: [		somePoints add: {(50 atRandom - 25) . (50 atRandom - 25)} ].fn := [ :x | -2 * x - 3 ]."We use Roassal3 to plot our points"chart := RSCompositeChart new.redPlot := RSScatterPlot new color: Color red.bluePlot := RSScatterPlot new color: Color blue.redPoints := somePoints select: [ :pt | pt second > (fn value: pt first) ].bluePoints := somePoints select: [ :pt | pt second <= (fn value: pt first) ].redPlot x: (redPoints collect: #first) y: (redPoints collect: #second).bluePlot x: (bluePoints collect: #first) y: (bluePoints collect: #second).chart add: redPlot.chart add: bluePlot.chart build.chart 

-----------------------------
"** UPDATED FOR Roassal3 **"somePoints := OrderedCollection new.500 timesRepeat: [		somePoints add: {(50 atRandom - 25) . (50 atRandom - 25)} ].fn := [ :x | -2 * x - 3 ]."We use Roassal3 to plot our points"chart := RSCompositeChart new.redPlot := RSScatterPlot new color: Color red.bluePlot := RSScatterPlot new color: Color blue.redPoints := somePoints select: [ :pt | pt second > (fn value: pt first) ].bluePoints := somePoints select: [ :pt | pt second <= (fn value: pt first) ].redPlot x: (redPoints collect: #first) y: (redPoints collect: #second).bluePlot x: (bluePoints collect: #first) y: (bluePoints collect: #second).chart add: redPlot.chart add: bluePlot."Added code below"chart add: (RSLinePlot new		color: Color orange;		x: #( -15 15 ) 		y: (Array with: (fn value: -15) with: (fn value: 15))).chart build.chart 

-----------------------------
"** UPDATED FOR Roassal3 **""** UPDATED FOR PHARO11 **
Changed nextInt: to nextInteger:"f := [ :x | (-2 * x) - 3 ].p := Neuron new.p weights: { 1 . 2 }.p bias: -1.r := Random new seed: 42."We are training the perceptron"500 timesRepeat: [ 	anX := (r nextInteger: 50) - 25.	anY := (r nextInteger: 50) - 25.	designedOutput := (f value: anX) >= anY 				ifTrue: [ 1 ] ifFalse: [ 0 ].	p train: { anX . anY } desiredOutput: designedOutput]."Test points"testPoints := OrderedCollection new.500 timesRepeat: [ 	testPoints add: { ((r nextInteger: 50) - 25) .	
			((r nextInteger: 50) - 25) } ].chart := RSCompositeChart new.redPlot := RSScatterPlot new color: Color red.bluePlot := RSScatterPlot new color: Color blue.redPoints := testPoints select: [ :pt | 				(p feed: pt) > 0.5 ].bluePoints := testPoints select: [ :pt |		       		(p feed: pt) <= 0.5 ].redPlot	x: (redPoints collect: #first)	y: (redPoints collect: #second).bluePlot	x: (bluePoints collect: #first)	y: (bluePoints collect: #second).chart add: redPlot.chart add: bluePlot.chart add: (RSLinePlot new		color: Color orange;		x: #( -15 15 ) 		y: (Array with: (f value: -15) 			with: (f value: 15))).chart build.chart 

-----------------------------
"** UPDATED FOR PHARO11 **
Changed nextInt: to nextInteger:"
r := Random new seed: 42.r nextInteger: 50.

-----------------------------
(1 to: 5) collect: [ :i | 50 atRandom ]

-----------------------------
"** UPDATED FOR PHARO11 **
Changed nextInt: to nextInteger:"
r := Random new seed: 42.(1 to: 5) collect: [ :i | r nextInt: 50 ]

-----------------------------
"** UPDATED FOR Roassal3 **""** UPDATED FOR PHARO11 **
Changed nextInt: to nextInteger:"

learningCurve := OrderedCollection new.f := [ :x | (-2 * x) - 3 ].0 to: 2000 by: 10 do: [ :nbOfTrained |	r := Random new seed: 42.	p := Neuron new.	p weights: #(1 2).	p bias: -1.	nbOfTrained timesRepeat: [ 		anX := (r nextInteger: 50) - 25.		anY := (r nextInteger: 50) - 25.		trainedOutput := (f value: anX) >= anY ifTrue: [1] ifFalse: [0].		p train: (Array with: anX with: anY) desiredOutput: trainedOutput ].		nbOfGood := 0.	nbOfTries := 1000.	nbOfTries timesRepeat: [ 		anX := (r nextInteger: 50) - 25.		anY := (r nextInteger: 50)- 25.		realOutput := (f value: anX) >= anY ifTrue: [1] ifFalse: [0].		((p feed: { anX . anY }) - realOutput) abs < 0.2			ifTrue: [ nbOfGood := nbOfGood + 1 ].	].	learningCurve add: { nbOfTrained . (nbOfGood / nbOfTries) }.].chart := RSCompositeChart new.plot := RSLinePlot new.plot x: (learningCurve collect: #first) y: (learningCurve collect: #second).chart add: plot.chart addDecoration: (RSChartTitleDecoration new		 title: 'Precision';			fontSize: 14).chart xlabel: 'Training Iterations'.chart mustInclude0inY.chart build.chart