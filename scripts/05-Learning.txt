
-----------------------------
"** UPDATED FOR Roassal3 **"
points :={(1 @ 3.0). (3 @ 5.2). (2 @ 4.1). (4 @ 7.5)}.chart := RSCompositeChart new.plot := RSScatterPlot new.plot x: (points collect: #x) y: (points collect: #x).plot color: Color red.chart add: plot.chart	mustInclude0inY;	mustInclude0inX.chart build.chart 

-----------------------------
"** UPDATED FOR Roassal3 **"
points :={(1 @ 3.0). (3 @ 5.2). (2 @ 4.1). (4 @ 7.5)}.a := 0.5.b := 3.f := [ :x | a * x + b ].chart := RSCompositeChart new.plot := RSScatterPlot new.plot x: (points collect: #x) y: (points collect: #y).plot color: Color red.chart add: plot.
xValues := 0 to: 5.linePlot := RSLinePlot new.linePlot x: xValues y: (xValues collect: f).linePlot color: Color blue.chart add: linePlot.chart mustInclude0inY.chart build.chart 

-----------------------------
points :={(1 @ 3.0) . (3 @ 5.2) . (2 @ 4.1) . (4 @ 7.5)}.a := 0.5.b := 3.f := [ :x | a * x + b ].j := (points collect: [ :p | (p y - (f value: p x)) squared ]) sum / points size.

-----------------------------
"** UPDATED FOR Roassal3 **"
points :={(1 @ 3.0) . (3 @ 5.2) . (2 @ 4.1) . (4 @ 7.5)}.a := 0.5.b := 3.f := [ :x | x * a + b ].learningRate := 0.01.1000 timesRepeat: [  	deriMSEa := (2 / points size) * (points collect: [ :aPoint | aPoint x * (aPoint y - (f value: aPoint x)) negated ]) sum.deriMSEb := (2 / points size) * (points collect: [ :aPoint | 1 * (aPoint y - (f value: aPoint x)) negated ]) sum.	a := a - (learningRate * deriMSEa).	b := b - (learningRate * deriMSEb).].chart := RSCompositeChart new.plot := RSScatterPlot new.plot x: (points collect: #x) y: (points collect: #y).plot color: Color red.chart add: plot.xValues := 0 to: 5.linePlot := RSLinePlot new.linePlot x: xValues y: (xValues collect: f).linePlot color: Color blue.chart add: linePlot.chart mustInclude0inY.chart build.chart 

-----------------------------
"** UPDATED FOR Roassal3 **"
points := {(1 @ 3.0) . (3 @ 5.2) . (2 @ 4.1) . (4 @ 7.5)}.a := 0.5.b := 3.f := [ :x | x * a + b ].learningRate := 0.01.result := OrderedCollection new.1000 timesRepeat: [  	deriMSEa := (2 / points size) * (points collect: [ :aPoint | aPoint x * (aPoint y - (f value: aPoint x)) negated ]) sum.	deriMSEb := (2 / points size) * (points collect: [ :aPoint | 1 * (aPoint y - (f value: aPoint x)) negated ]) sum.	a := a - (learningRate * deriMSEa).	b := b - (learningRate * deriMSEb).		mse := (points collect: [ :aPoint | (aPoint y - (f value: aPoint x)) squared ]) sum / points size.	result add: mse ].chart := RSCompositeChart new.linePlot := RSLinePlot new.linePlot x: (1 to: 1000) y: result.linePlot color: Color blue.chart add: linePlot.chart		mustInclude0inY;		mustInclude0inX.chart build.chart 

-----------------------------
"** UPDATED FOR Roassal3 **"
nbOfPoints := 100.r := Random seed: 42.points := (1 to: nbOfPoints) collect: [ :i | (i / nbOfPoints) asFloat @ ((r next * 40 - 20 + i ) / nbOfPoints) asFloat ].a := 0.5.b := 3.learningRate := 0.01.f := [ :x | x * a + b ].result := OrderedCollection new.3000 timesRepeat: [  	deriMSEa := (2 / points size) * (points collect: [ :aPoint | aPoint x * (aPoint y - (f value: aPoint x)) negated ]) sum.	deriMSEb := (2 / points size) * (points collect: [ :aPoint | 1 * (aPoint y - (f value: aPoint x)) negated ]) sum.	a := a - (learningRate * deriMSEa).	b := b - (learningRate * deriMSEb).		mse := (points collect: [ :aPoint | (aPoint y - (f value: aPoint x)) squared ]) sum / points size.	result add: mse ].chart := RSCompositeChart new.linePlot := RSLinePlot new.linePlot x: (1 to: 3000) y: result.linePlot color: Color blue.chart add: linePlot.chart mustInclude0inY; mustInclude0inX.chart build.chart 

-----------------------------
"** UPDATED FOR Roassal3 **"
nbOfPoints := 100.r := Random seed: 42.points := (1 to: nbOfPoints) collect: [ :i | (i / nbOfPoints) asFloat @ ((r next * 40 - 20 + i ) / nbOfPoints) asFloat ].a := 0.5.b := 3.learningRate := 0.01.f := [ :x | x * a + b ].result := OrderedCollection new.3000 timesRepeat: [  	deriMSEa := (2 / points size) * (points collect: [ :aPoint | aPoint x * (aPoint y - (f value: aPoint x)) negated ]) sum.	deriMSEb := (2 / points size) * (points collect: [ :aPoint | 1 * (aPoint y - (f value: aPoint x)) negated ]) sum.	a := a - (learningRate * deriMSEa).	b := b - (learningRate * deriMSEb).		mse := (points collect: [ :aPoint | (aPoint y - (f value: aPoint x)) squared ]) sum / points size.	result add: mse ].chart := RSCompositeChart new.linePlot := RSLinePlot new.linePlot x: (1 to: 3000) y: result.linePlot color: Color blue.chart add: linePlot.chart build. "....."chart := RSCompositeChart new.scatterPlot := RSScatterPlot new.scatterPlot x: (points collect: #x) y: (points collect: #y).scatterPlot color: Color red.chart add: scatterPlot.linePlot2 := RSLinePlot new.xValues := 0 to: 1.0 by: 0.01.linePlot2 x: xValues y: (xValues collect: f).linePlot2 color: Color blue.chart add: linePlot2.chart build.chart

-----------------------------
"** UPDATED FOR Roassal3 **"

nbOfPoints := 100.r := Random seed: 42.points := (1 to: nbOfPoints) collect: [ :i | (i / nbOfPoints) asFloat @ ((r next * 40 - 20 + i ) / nbOfPoints) asFloat ].currentBatch := OrderedCollection new.miniBatches := OrderedCollection new.batchSize := 5.1 to: points size do: [ :index | 	 currentBatch add: (points at: index).	index \\ batchSize = 0 		ifTrue: [ miniBatches add: currentBatch copy. currentBatch := OrderedCollection new. ]].miniBatches.a := 0.5.b := 3.learningRate := 0.01.f := [ :x | x * a + b ].result := OrderedCollection new.1000 timesRepeat: [  	accumulatedMse := 0.	miniBatches do: [ :pointsBatch |		deriMSEa := (2 / pointsBatch size) * (pointsBatch collect: [ :aPoint | aPoint x * (aPoint y - (f value: aPoint x)) negated ]) sum.		deriMSEb := (2 / pointsBatch size) * (pointsBatch collect: [ :aPoint | 1 * (aPoint y - (f value: aPoint x)) negated ]) sum.		a := a - (learningRate * deriMSEa).		b := b - (learningRate * deriMSEb).			mse := (pointsBatch collect: [ :aPoint | (aPoint y - (f value: aPoint x)) squared ]) sum / points size.		accumulatedMse := accumulatedMse + mse	].	result add: accumulatedMse ].chart := RSCompositeChart new.linePlot := RSLinePlot new.linePlot x: (1 to: 1000) y: result.linePlot color: Color blue.chart add: linePlot.chart build.chart

-----------------------------
[ nbOfPoints := 30000.r := Random seed: 42.points := (1 to: nbOfPoints) collect: [ :i | (i / nbOfPoints) asFloat @ ((r next * 40 - 20 + i ) / nbOfPoints) asFloat ].a := 0.5.b := 3.f := [ :x | x * a + b ].learningRate := 0.01.result := OrderedCollection new.3000 timesRepeat: [  	deriMSEa := (2 / points size) * (points collect: [ :aPoint | aPoint x * (aPoint y - (f value: aPoint x)) negated ]) sum.	deriMSEb := (2 / points size) * (points collect: [ :aPoint | 1 * (aPoint y - (f value: aPoint x)) negated ]) sum.	a := a - (learningRate * deriMSEa).	b := b - (learningRate * deriMSEb).		mse := (points collect: [ :aPoint | (aPoint y - (f value: aPoint x)) squared ]) sum / points size.	result add: mse ]. ] timeToRun

-----------------------------
[ nbOfPoints := 30000.r := Random seed: 42.points := (1 to: nbOfPoints) collect: [ :i | (i / nbOfPoints) asFloat @ ((r next * 40 - 20 + i ) / nbOfPoints) asFloat ].currentBatch := OrderedCollection new.miniBatches := OrderedCollection new.batchSize := 5.1 to: points size do: [ :index | 	 currentBatch add: (points at: index).	index \\ batchSize = 0 		ifTrue: [ miniBatches add: currentBatch copy. currentBatch := OrderedCollection new. ]].a := 0.5.b := 3.f := [ :x | x * a + b ].learningRate := 0.01.result := OrderedCollection new.1000 timesRepeat: [  	accumulatedMse := 0.	miniBatches do: [ :pointsBatch |		deriMSEa := (2 / pointsBatch size) * (pointsBatch collect: [ :aPoint | aPoint x * (aPoint y - (f value: aPoint x)) negated ]) sum.		deriMSEb := (2 / pointsBatch size) * (pointsBatch collect: [ :aPoint | 1 * (aPoint y - (f value: aPoint x)) negated ]) sum.		a := a - (learningRate * deriMSEa).		b := b - (learningRate * deriMSEb).			mse := (pointsBatch collect: [ :aPoint | (aPoint y - (f value: aPoint x)) squared ]) sum / points size.		accumulatedMse := accumulatedMse + mse	].	result add: accumulatedMse ].] timeToRun 
